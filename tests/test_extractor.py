import numpy as np
import pytest
from pathlib import Path

from boldaric.extractor import extract_features, extract_metadata

# Test audio file path - this should be a real audio file
# To run tests, you'll need to provide a real audio file at this path
TEST_AUDIO_FILE = "tests/test.mp3"

EXPECTED_EXTRACTION = {
    "bpm": 135.63702392578125,
    "chord_stability": {"change_rate": 2.6799732610377585, "unique_chords": 3},
    "dynamic_complexity": 1.0281224250793457,
    "energy_curve": {"mean": 31834.609375, "peak_count": 504, "std": 11671.0029296875},
    "genre": [
        {"label": "Rock---Heavy Metal", "score": 0.49623632431030273},
        {"label": "Rock---Speed Metal", "score": 0.22886410355567932},
        {"label": "Rock---Power Metal", "score": 0.2270706295967102},
        {"label": "Rock---Black Metal", "score": 0.13532379269599915},
        {"label": "Rock---Thrash", "score": 0.1329132616519928},
        {"label": "Rock---Folk Metal", "score": 0.06210070848464966},
        {"label": "Rock---Gothic Metal", "score": 0.061204880475997925},
        {"label": "Rock---Death Metal", "score": 0.05508771538734436},
        {"label": "Rock---Progressive Metal", "score": 0.05429753661155701},
        {"label": "Rock---Hard Rock", "score": 0.052060067653656006},
    ],
    "genre_embeddings": [
        -0.003451194381341338,
        0.0190829336643219,
        0.0301289614289999,
        -0.038013409823179245,
        0.13633325695991516,
        0.02509978599846363,
        0.008500857278704643,
        0.002846273360773921,
        0.14028550684452057,
        -0.013696019537746906,
        0.010906762443482876,
        -0.001933179795742035,
        0.03342798724770546,
        0.002982296282425523,
        0.2673116624355316,
        -0.006986981723457575,
        0.009100806899368763,
        0.08342746645212173,
        -0.02321627549827099,
        0.03312724456191063,
        0.01653488166630268,
        0.22315049171447754,
        0.009785236790776253,
        0.07577528804540634,
        0.03075271286070347,
        -0.0023410990834236145,
        0.016480306163430214,
        -0.008073643781244755,
        -0.002838020445778966,
        -0.016040291637182236,
        -0.02646382711827755,
        0.39199817180633545,
        -0.038804810494184494,
        -0.0028437385335564613,
        0.21472813189029694,
        0.04173661768436432,
        0.3404351472854614,
        -0.028223181143403053,
        -0.004310178104788065,
        0.14605529606342316,
        -0.02909088134765625,
        0.019565124064683914,
        -0.002325556008145213,
        -0.02016199193894863,
        -0.026505490764975548,
        0.009576351381838322,
        0.37959814071655273,
        0.35923779010772705,
        -0.011169160716235638,
        0.2163660079240799,
        0.030244676396250725,
        -0.01528814435005188,
        0.24940980970859528,
        0.09041037410497665,
        -0.0005697679589502513,
        -0.01841147243976593,
        -0.018183330073952675,
        0.043096303939819336,
        0.00343650602735579,
        -0.02887609601020813,
        0.19230371713638306,
        -0.011458064429461956,
        0.006560351233929396,
        0.04427546262741089,
        0.029862159863114357,
        -0.002679641591385007,
        0.05685187503695488,
        0.05121221765875816,
        0.03337414562702179,
        -0.015416660346090794,
        0.0004988331347703934,
        0.045007944107055664,
        -0.023693999275565147,
        -0.03647614270448685,
        0.12500791251659393,
        0.017474928870797157,
        0.6034279465675354,
        0.004778723698109388,
        0.059769030660390854,
        0.044964294880628586,
        -0.011293377727270126,
        0.021763669326901436,
        -0.051399026066064835,
        -0.004614743869751692,
        0.03638055920600891,
        0.03295367211103439,
        0.04012162983417511,
        0.02870040386915207,
        0.04177675023674965,
        0.001732031931169331,
        -0.047530580312013626,
        0.028449608013033867,
        0.027981877326965332,
        -0.001291276072151959,
        -0.02616739459335804,
        0.1200050413608551,
        0.10972148180007935,
        0.044508907943964005,
        0.010611668229103088,
        0.15764591097831726,
        0.00851292721927166,
        0.05076396465301514,
        -0.047480035573244095,
        -0.0571223683655262,
        0.06178063154220581,
        -0.02402825467288494,
        0.0868481695652008,
        -0.012653662823140621,
        0.018097668886184692,
        0.08420517295598984,
        -0.016611479222774506,
        0.17306171357631683,
        -0.011255625635385513,
        0.05996082350611687,
        -0.01416517049074173,
        -0.026191378012299538,
        0.04033529385924339,
        -0.014462980441749096,
        0.22881120443344116,
        -0.053469765931367874,
        0.005924265366047621,
        0.4506552517414093,
        0.7480447888374329,
        0.14303497970104218,
        0.1210257038474083,
        -0.026810025796294212,
        0.012380341999232769,
        0.0007600481039844453,
    ],
    "groove": {
        "beat_confidence": 0.4476291239261627,
        "beat_consistency": -0.8621917472065361,
        "danceability": 1.539206862449646,
        "dnc_bpm": -11198.1943359375,
        "syncopation": 0.0105111263692379,
        "tempo_stability": 0.9721206489447535,
    },
    "key": {"confidence": 0.9550358057022095, "scale": "minor", "tonic": "F"},
    "loudness": 1704.429443359375,
    "metadata": {
        "album": "Imaginations From the Other Side",
        "artist": "Blind Guardian",
        "audio_length": 1102511,
        "date": "1995-04-05",
        "duration": 25.05142857142857,
        "genre": ["Power Metal"],
        "path": "/home/dillavou/projects/boldaric/tests/test.mp3",
        "title": "Imaginations From the Other Side",
    },
    "mfcc": {
        "covariance": [
            [
                632.4438370935617,
                -186.7921840095494,
                -145.248297463366,
                -174.9895779514544,
                -79.80814801341222,
                -7.58787010665603,
                21.560660321444026,
                22.553166983797215,
                -74.41130387253476,
                12.509915547022493,
                17.387914111583466,
                -22.455045614841357,
                -15.817489363234612,
            ],
            [
                -186.7921840095494,
                460.30732856140537,
                -148.66602089589892,
                15.80405816652232,
                -44.035837978068436,
                18.506836639047258,
                35.92139556936701,
                -9.622342661470547,
                1.909171171885422,
                -47.82121698120364,
                11.23559515999139,
                -6.783207788350974,
                -34.00424384733571,
            ],
            [
                -145.248297463366,
                -148.66602089589892,
                305.09458311645255,
                67.08042652131428,
                77.98047832199002,
                -6.547920954632593,
                -35.095302785727434,
                4.2517528953243175,
                24.44870397655158,
                41.26205314976578,
                -22.25025679331539,
                32.79217051327488,
                30.35207030651135,
            ],
            [
                -174.9895779514544,
                15.80405816652232,
                67.08042652131428,
                176.31268693619654,
                65.22536883347875,
                -3.852258176874118,
                -41.49063663894367,
                -15.521424075354727,
                55.67540205086334,
                15.266205662752476,
                0.3352744651357418,
                9.322306681827602,
                21.411117316641715,
            ],
            [
                -79.80814801341222,
                -44.035837978068436,
                77.98047832199002,
                65.22536883347875,
                136.8667572225504,
                11.070351961479448,
                -27.403213396819076,
                -10.815455713969213,
                18.97071423859333,
                27.559882165759888,
                2.4244103941528135,
                15.952048191644295,
                11.396444288803385,
            ],
            [
                -7.58787010665603,
                18.506836639047258,
                -6.547920954632593,
                -3.852258176874118,
                11.070351961479448,
                73.18035391192659,
                42.00196554250421,
                8.83570017901134,
                -0.9532605382279777,
                0.07727435638978175,
                5.693641708481641,
                3.332390190298151,
                2.5576865302553373,
            ],
            [
                21.560660321444026,
                35.92139556936701,
                -35.095302785727434,
                -41.49063663894367,
                -27.403213396819076,
                42.00196554250421,
                115.24695257373014,
                50.000481797901514,
                -12.336695850952257,
                -13.863965295439888,
                13.821382733310331,
                3.8374674226176677,
                0.5418765467372967,
            ],
            [
                22.553166983797215,
                -9.622342661470547,
                4.2517528953243175,
                -15.521424075354727,
                -10.815455713969213,
                8.83570017901134,
                50.000481797901514,
                77.1414388098348,
                16.203402113369286,
                9.224275763837843,
                10.696111942457934,
                6.3149106769678,
                4.088229013219688,
            ],
            [
                -74.41130387253476,
                1.909171171885422,
                24.44870397655158,
                55.67540205086334,
                18.97071423859333,
                -0.9532605382279777,
                -12.336695850952257,
                16.203402113369286,
                79.99174793829818,
                23.375425469665355,
                6.205928024606655,
                8.716251843489175,
                13.30077134662372,
            ],
            [
                12.509915547022493,
                -47.82121698120364,
                41.26205314976578,
                15.266205662752476,
                27.559882165759888,
                0.07727435638978175,
                -13.863965295439888,
                9.224275763837843,
                23.375425469665355,
                58.45699813429631,
                15.515882291001613,
                8.98628992944246,
                2.4969391610389087,
            ],
            [
                17.387914111583466,
                11.23559515999139,
                -22.25025679331539,
                0.3352744651357418,
                2.4244103941528135,
                5.693641708481641,
                13.821382733310331,
                10.696111942457934,
                6.205928024606655,
                15.515882291001613,
                43.970102252216385,
                11.795992257885436,
                -1.3283399479826747,
            ],
            [
                -22.455045614841357,
                -6.783207788350974,
                32.79217051327488,
                9.322306681827602,
                15.952048191644295,
                3.332390190298151,
                3.8374674226176677,
                6.3149106769678,
                8.716251843489175,
                8.98628992944246,
                11.795992257885436,
                39.1695249152752,
                18.458517267534216,
            ],
            [
                -15.817489363234612,
                -34.00424384733571,
                30.35207030651135,
                21.411117316641715,
                11.396444288803385,
                2.5576865302553373,
                0.5418765467372967,
                4.088229013219688,
                13.30077134662372,
                2.4969391610389087,
                -1.3283399479826747,
                18.458517267534216,
                47.00992393983826,
            ],
        ],
        "mean": [
            -483.3424987792969,
            93.99097442626953,
            -0.7472792863845825,
            39.22578048706055,
            8.245674133300781,
            5.000341415405273,
            1.1321052312850952,
            6.841293811798096,
            -1.8161357641220093,
            -7.129194259643555,
            -0.40523427724838257,
            -3.436121702194214,
            -5.725922584533691,
        ],
        "temporal_variation": 11.79881477355957,
    },
    "mood": {
        "logits": {
            "aggressive": -2.5270934104919434,
            "happy": 3.2400197982788086,
            "party": 3.022390127182007,
            "relaxed": 3.048855781555176,
            "sad": 4.531155586242676,
        },
        "probabilities": {
            "aggressive": 0.07398052310637834,
            "happy": 0.9623128275191644,
            "party": 0.9535754495523389,
            "relaxed": 0.9547331016274715,
            "sad": 0.9893464940844219,
        },
    },
    "spectral_character": {
        "brightness": -0.33775705099105835,
        "contrast_mean": -0.6487753987312317,
        "valley_std": 3.585942506790161,
    },
    "vocal": {
        "avg_pitch_duration": 0.03093105899076048,
        "pitch_presence_ratio": 0.7467532467532467,
        "pitch_segment_count": 25,
    },
}


@pytest.fixture
def sample_audio_file():
    yield TEST_AUDIO_FILE


def test_extract_features_structure(sample_audio_file):
    """Test that extract_features returns features with expected structure"""
    features = extract_features(sample_audio_file)

    # Check that we have the main feature categories
    expected_keys = {
        "metadata",
        "bpm",
        "loudness",
        "dynamic_complexity",
        "energy_curve",
        "key",
        "chord_stability",
        "vocal",
        "mfcc",
        "spectral_character",
        "groove",
        "mood",
        "genre",
        "genre_embeddings",
    }

    assert isinstance(features, dict)
    assert features.keys() == expected_keys
    assert features == EXPECTED_EXTRACTION


    # Check that genre predictions have label-score pairs
    assert all(
        isinstance(genre, dict) and "label" in genre and "score" in genre
        for genre in features["genre"]
    )

    # Check that mood probabilities are in [0, 1] range
    assert all(0 <= prob <= 1 for prob in features["mood"]["probabilities"].values())

    # Check that MFCC features have mean and covariance
    assert "mean" in features["mfcc"]
    assert "covariance" in features["mfcc"]

    # Check that groove features have expected components
    groove_keys = {
        "danceability",
        "tempo_stability",
        "beat_confidence",
        "syncopation",
        "dnc_bpm",
        "beat_consistency",
    }
    assert features["groove"].keys() == groove_keys


def test_extract_features_with_nonexistent_file():
    """Test handling of nonexistent audio files"""
    with pytest.raises(Exception):
        extract_features("nonexistent_file.mp3")


def test_extract_features_with_invalid_file(tmp_path):
    """Test handling of invalid audio files"""
    # Create a text file that's not a valid audio file
    invalid_file = tmp_path / "invalid.txt"
    invalid_file.write_text("this is not audio data")

    with pytest.raises(Exception):
        extract_features(str(invalid_file))


def test_metadata_extraction(sample_audio_file):
    """Test that metadata is extracted correctly"""
    import essentia.standard as es
    from mutagen import File

    loader_44_1k = es.MonoLoader(filename=sample_audio_file, sampleRate=44100)
    audio_44_1k = loader_44_1k()
    audio_file = File(sample_audio_file)
    
    metadata = extract_metadata(sample_audio_file, audio_file, audio_44_1k)

    # Check that we have basic metadata fields
    required_metadata = {"path", "duration", "audio_length"}
    assert metadata.keys() >= required_metadata  # Using >= to check subset

    # Check that path is absolute
    assert Path(metadata["path"]).is_absolute()

    # Check that duration is a positive number
    assert isinstance(metadata["duration"], float)
    assert metadata["duration"] > 0

